program                     ::= include_directive* global_variable_declaration* package* function* main_function default_functions

include_directive           ::= "include_once" string_literal ";"

main_function               ::= "_main_" "(" parameters? ")" "{" statement* "return" expression ";" "}"

function                    ::= "func" identifier "(" parameters? ")" "->" type "{" statement* "return" expression? ";" "}"
parameters                  ::= parameter ("," parameter)*
parameter                   ::= type identifier

type                        ::= "number" | "string" | "bool" | "void" | array_type | identifier

global_variable_declaration ::= type identifier ("=" expression)? ";"

package                     ::= "package" identifier "{" package_body "}"
package_body                ::= (variable_declaration | function)*

statement                   ::= variable_declaration 
                               | assignment 
                               | compound_assignment 
                               | increment_decrement 
                               | if_statement 
                               | while_statement 
                               | for_statement
                               | block 
                               | expression_statement 
                               | comment
                               | object_instantiation

variable_declaration        ::= (type | "let") identifier ("=" expression)? ";"
assignment                  ::= (identifier | member_access) ("=" | "[" expression "]") expression ";"
compound_assignment         ::= (identifier | member_access) ("+=" | "-=" | "*=" | "/=") expression ";"
increment_decrement         ::= (identifier | member_access) ("++" | "--") ";"
if_statement                ::= "if" "(" expression ")" statement ("else" statement)?
while_statement             ::= "while" "(" expression ")" statement
for_statement               ::= "for" "(" (variable_declaration | assignment) expression ";" expression_statement ")" statement
block                       ::= "{" statement* "}"
expression_statement        ::= expression ";"
object_instantiation        ::= identifier identifier "=" "new" identifier "(" arguments? ")" ";"

expression                  ::= literal 
                               | string_literal 
                               | boolean_literal 
                               | identifier 
                               | array_access 
                               | member_access
                               | binary_expression 
                               | unary_expression 
                               | "(" expression ")" 
                               | function_call

binary_expression           ::= expression binary_operator expression
unary_expression            ::= unary_operator expression

binary_operator             ::= "+" | "-" | "*" | "/" | "%" | "<" | ">" | "<=" | ">=" | "==" | "&&" | "||"
unary_operator              ::= "-" | "++" | "--" | "!"

array_access                ::= identifier "[" expression "]"
member_access               ::= identifier "." identifier

literal                     ::= [0-9]+
string_literal              ::= "\"" [^\"]* "\""
boolean_literal             ::= "true" | "false"
identifier                  ::= [a-zA-Z_][a-zA-Z0-9_]*

comment                     ::= single_line_comment | multi_line_comment
single_line_comment         ::= "//" [^\n]*
multi_line_comment          ::= "/*" .* "*/"

function_call               ::= (identifier | member_access) "(" arguments? ")"
arguments                   ::= expression ("," expression)*

default_functions           ::= "func print(string msg) -> void" 
                               | "func input() -> string" 
                               | "func file_read(string filename) -> string" 
                               | "func file_write(string filename, string content) -> void"
                               | "func file_exist(string filename) -> bool"
                               | "func file_delete(string filename) -> bool"
                               | "func array_len(array_type array) -> number"
                               | "func array_add(array_type array, type element) -> array_type"
                               | "func array_remove(array_type array, number index) -> array_type"